// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
