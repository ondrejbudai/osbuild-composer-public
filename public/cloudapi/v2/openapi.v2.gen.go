// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`

	// List of ssh keys
	Sshkey       *[]SSHKey     `json:"sshkey,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
