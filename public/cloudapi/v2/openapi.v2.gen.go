// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`

	// List of ssh keys
	Sshkey       *[]SSHKey     `json:"sshkey,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+/7/BwAA//9LlYnqHZIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
