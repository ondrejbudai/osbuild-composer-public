// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
