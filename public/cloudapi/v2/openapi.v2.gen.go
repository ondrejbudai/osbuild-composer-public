// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream *string            `json:"datastream,omitempty"`
	ProfileId  string             `json:"profile_id"`
	Tailoring  *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q7gxabkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
